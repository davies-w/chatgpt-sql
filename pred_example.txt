SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age)  FROM singer  WHERE Country = 'France'
SELECT Song_Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1;
SELECT s.Song_Name, s.Song_release_year  FROM singer s  WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT Country FROM singer WHERE Age > 20;
SELECT singer.Country, COUNT(singer.Singer_ID) FROM singer GROUP BY singer.Country
SELECT Country, COUNT(Singer_ID) AS Singer_Count   FROM singer   GROUP BY Country
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT COUNT(*) FROM concert WHERE Year=2014 OR Year=2015;
SELECT COUNT(*) FROM concert WHERE Year IN (2014,2015);
SELECT stadium.Name, COUNT(concert.concert_ID) FROM stadium  LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Name;
SELECT Stadium_ID, COUNT(*)  FROM concert  GROUP BY Stadium_ID
SELECT stadium.Name, stadium.Capacity FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(*) as num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1;
SELECT Year FROM concert  GROUP BY Year  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT stadium.Name  FROM stadium  LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.concert_ID IS NULL;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT s1.Country FROM singer s1 WHERE s1.Age > 40 AND EXISTS (   SELECT 1   FROM singer s2   WHERE s2.Age < 30 AND s1.Country = s2.Country )
SELECT Name FROM stadium WHERE Stadium_ID NOT IN  (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN  (SELECT Stadium_ID FROM concert WHERE Year = 2014);
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS singer_count FROM concert INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_ID
SELECT singer.Name, COUNT(concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS number_of_concerts FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name
SELECT singer.Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country  FROM singer  WHERE singer.Singer_ID IN  (SELECT singer_in_concert.Singer_ID  FROM singer_in_concert  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Theme LIKE '%Hey%')  AND singer.Song_Name LIKE '%Hey%';
SELECT stadium.Name, stadium.Location  FROM stadium  INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year = 2014  AND stadium.Stadium_ID IN      (SELECT concert.Stadium_ID      FROM concert      WHERE concert.Year = 2015);
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND stadium.Stadium_ID IN  (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2015)
SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))
SELECT COUNT(concert.concert_ID)  FROM concert  WHERE concert.Stadium_ID =    (SELECT stadium.Stadium_ID     FROM stadium     ORDER BY stadium.Capacity DESC     LIMIT 1)
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT MIN(weight)  FROM Pets  WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MIN(weight)  FROM Pets  WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
SELECT Pets.PetType, MAX(Pets.weight) FROM Pets GROUP BY Pets.PetType
SELECT COUNT(*) FROM Has_Pet  WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)
SELECT COUNT(*)  FROM Has_Pet  WHERE StuID IN  (SELECT StuID FROM Student WHERE Age > 20)
SELECT COUNT(*) FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'
SELECT COUNT(*) FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Sex = 'female' AND Pets.PetType = 'dog'
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat','dog')
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')
SELECT FName FROM Student  WHERE StuID IN (     SELECT StuID FROM Has_Pet      WHERE PetID IN (         SELECT PetID FROM Pets          WHERE PetType = 'cat'     )      INTERSECT      SELECT StuID FROM Has_Pet      WHERE PetID IN (         SELECT PetID FROM Pets          WHERE PetType = 'dog'     ) );
SELECT FName FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     WHERE PetID IN (         SELECT PetID         FROM Pets         WHERE PetType = 'cat'     )     INTERSECT     SELECT StuID     FROM Has_Pet     WHERE PetID IN (         SELECT PetID         FROM Pets         WHERE PetType = 'dog'     ) );
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' );
SELECT Student.Major, Student.Age  FROM Student  WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'))
SELECT Student.StuID  FROM Student  LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IS NOT 'cat' OR Pets.PetType IS NULL;
SELECT Student.StuID  FROM Student  WHERE Student.StuID NOT IN      (SELECT Has_Pet.StuID       FROM Has_Pet       JOIN Pets ON Has_Pet.PetID = Pets.PetID       WHERE Pets.PetType = 'cat')
SELECT Student.Fname, Student.Age  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog'  AND Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT Fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE PetType = 'dog' AND Student.StuID NOT IN  (SELECT Student.StuID  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE PetType = 'cat')
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (     SELECT MIN(pet_age) FROM Pets )
SELECT Pets.PetType, Pets.weight  FROM Pets  WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1;
SELECT Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age)  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  GROUP BY Pets.PetType
SELECT PetType, AVG(pet_age), MAX(pet_age)   FROM Pets   GROUP BY PetType
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT Pets.PetType, AVG(Pets.weight)  FROM Pets  GROUP BY Pets.PetType
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT FName, Age  FROM Student  WHERE StuID IN      (SELECT StuID FROM Has_Pet)
SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Pets.PetID  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.LName = 'Smith'
SELECT Student.StuID, COUNT(Has_Pet.PetID) as Num_of_Pets   FROM Student   INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   GROUP BY Student.StuID
SELECT Student.StuID, COUNT(Pets.PetID) FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Student.StuID;
SELECT Student.FName, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
SELECT Fname, Sex  FROM Student  WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3  LIMIT 1;
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT COUNT(*) FROM continents
SELECT COUNT(Continent) FROM continents
SELECT Continents.ContId, Continents.Continent, COUNT(countries.CountryId)  FROM Continents  JOIN countries ON Continents.ContId = countries.Continent  GROUP BY Continents.ContId
SELECT Continents.ContId, Continents.Continent, COUNT(countries.CountryId) FROM Continents LEFT JOIN countries ON Continents.ContId = countries.Continent GROUP BY Continents.ContId, Continents.Continent
SELECT COUNT(*) FROM countries
SELECT COUNT(*) FROM countries;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS Number_of_Models FROM car_makers LEFT JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId)  FROM car_makers  LEFT JOIN model_list ON car_makers.Maker = model_list.Maker  GROUP BY car_makers.Id;
SELECT Model FROM car_names  JOIN model_list ON car_names.Model = model_list.ModelId  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT Model FROM car_names WHERE MakeId IN (   SELECT Id FROM cars_data   WHERE Weight < (     SELECT AVG(Weight) FROM cars_data   ) );
SELECT Model FROM model_list WHERE ModelId IN (     SELECT MakeId     FROM car_names     WHERE MakeId IN (         SELECT Id         FROM car_makers         WHERE Id IN (             SELECT Id             FROM cars_data             WHERE Weight < (SELECT AVG(Weight) FROM cars_data)         )     ) )
SELECT car_makers.Maker  FROM car_makers  INNER JOIN model_list ON car_makers.Id = model_list.Maker  INNER JOIN car_names ON model_list.ModelId = car_names.Model  INNER JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year = 1970
SELECT car_makers.Maker  FROM car_makers  JOIN cars_data ON car_makers.Id = cars_data.Id  WHERE cars_data.Year = 1970
SELECT car_makers.Maker, cars_data.Year   FROM car_makers   JOIN car_names ON car_makers.Id = car_names.MakeId   JOIN model_list ON car_names.Model = model_list.ModelId   JOIN cars_data ON car_names.MakeId = cars_data.Id   WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, MIN(cars_data.Year) FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN cars_data ON model_list.ModelId = cars_data.Id  GROUP BY car_makers.Maker  ORDER BY MIN(cars_data.Year) ASC  LIMIT 1;
SELECT DISTINCT Model FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Maker  JOIN cars_data ON car_makers.Id = cars_data.Id  WHERE Year > 1980;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Maker JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year > 1980;
SELECT continents.Continent, COUNT(DISTINCT car_makers.Country)  FROM continents  LEFT JOIN countries ON continents.ContId = countries.Continent  LEFT JOIN car_makers ON countries.CountryName = car_makers.Country  GROUP BY continents.Continent
SELECT continents.Continent, COUNT(car_makers.Id)  FROM continents  LEFT JOIN countries ON continents.ContId = countries.Continent  LEFT JOIN car_makers ON countries.CountryName = car_makers.Country  GROUP BY continents.Continent
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryName  ORDER BY COUNT(DISTINCT car_makers.Maker) DESC  LIMIT 1;
SELECT countries.CountryName  FROM countries  INNER JOIN car_makers  ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryId  ORDER BY COUNT(DISTINCT car_makers.Id) DESC  LIMIT 1;
SELECT car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels   FROM car_makers   INNER JOIN model_list ON car_makers.Maker = model_list.Maker   GROUP BY car_makers.Id, car_makers.FullName
SELECT Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Maker  WHERE car_makers.FullName = 'amc hornet sportabout (sw)';
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Maker  WHERE car_makers.FullName = "American Motors Corporation"  AND model_list.Model = "Hornet Sportabout (sw)"
SELECT COUNT(*) FROM car_makers WHERE Country = 'France'
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France'
SELECT COUNT(*)  FROM model_list  INNER JOIN car_makers ON model_list.Maker = car_makers.Maker  WHERE car_makers.Country = 'USA'
SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryName WHERE countries.Continent = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT Maker, Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Maker
SELECT car_makers.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker
SELECT countries.CountryId, countries.CountryName   FROM countries   INNER JOIN car_makers ON countries.CountryName = car_makers.Country   GROUP BY countries.CountryId   HAVING COUNT(DISTINCT car_makers.Maker) >= 1;
SELECT countries.CountryId, countries.CountryName   FROM countries   JOIN car_makers ON countries.CountryName = car_makers.Country
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT Year, AVG(Weight)  FROM cars_data  GROUP BY Year
SELECT Year, AVG(Weight) AS AvgWeight, AVG(Year) AS AvgYear FROM cars_data GROUP BY Year
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName  FROM  countries  INNER JOIN  (SELECT Country, COUNT(DISTINCT Maker) as NumMakers FROM car_makers GROUP BY Country HAVING NumMakers >= 3) AS Makers  ON  countries.CountryId = Makers.Country  WHERE  countries.Continent = 'Europe'
SELECT MAX(Horsepower), Maker  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Cylinders = 3
SELECT MAX(Horsepower), Maker  FROM car_makers  JOIN model_list ON car_makers.Maker = model_list.Maker  JOIN car_names ON car_names.MakeId = car_makers.Id  JOIN cars_data ON car_names.Model = cars_data.Id  WHERE Cylinders = 3
SELECT model_list.Model, cars_data.MPG   FROM model_list   JOIN car_names ON model_list.ModelId = car_names.Model   JOIN car_makers ON car_names.MakeId = car_makers.Id   JOIN cars_data ON car_names.MakeId = cars_data.Id   WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT Model  FROM model_list  JOIN car_names ON model_list.ModelId = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Edispl) FROM cars_data  WHERE Id IN  (SELECT Id FROM car_names  WHERE MakeId IN  (SELECT Id FROM car_makers  WHERE Maker LIKE '%volvo%'))
SELECT AVG(Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Maker  WHERE car_makers.FullName LIKE '%volvo%'
SELECT Cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate)   FROM cars_data   GROUP BY Cylinders;
SELECT Model, COUNT(DISTINCT MakeId) AS Num_Makes   FROM car_names   GROUP BY Model   ORDER BY Num_Makes DESC   LIMIT 1
SELECT model, COUNT(DISTINCT MakeId) AS num_versions FROM car_names GROUP BY model ORDER BY num_versions DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year=1980;
SELECT COUNT(*) FROM model_list WHERE Maker = 'American Motor Company'
SELECT COUNT(*)  FROM model_list  WHERE Maker = 'American Motor Company'
SELECT car_makers.Id, car_makers.FullName   FROM car_makers  JOIN model_list ON car_makers.Maker = model_list.Maker   GROUP BY car_makers.Id   HAVING COUNT(model_list.ModelId) > 3;
SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3);
SELECT DISTINCT Model  FROM model_list  WHERE Maker = 'General Motors' OR Weight > 3500
SELECT model_list.Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Maker INNER JOIN cars_data ON car_makers.Id = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000
SELECT Year  FROM cars_data  WHERE Weight < 4000  AND Year IN (SELECT Year FROM cars_data WHERE Weight > 3000);
SELECT Horsepower  FROM cars_data  WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT cars_data.Horsepower  FROM  cars_data  WHERE  cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT MIN(Cylinders) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE Maker = 'volvo' AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE Maker = 'volvo' AND Model = 'volvo')
SELECT MIN(Cylinders) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Maker  WHERE car_makers.FullName LIKE '%volvo%'  AND model_list.Model LIKE '%volvo%'  AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Maker  WHERE car_makers.FullName LIKE '%volvo%'  AND model_list.Model LIKE '%volvo%');
SELECT COUNT(*)  FROM cars_data  WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(DISTINCT CountryId) FROM countries  WHERE CountryId IN  (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2)
SELECT COUNT(DISTINCT CountryId) FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2);
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.Model INNER JOIN car_makers ON car_names.MakeId = car_makers.Id INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT car_names.MakeId, car_makers.Maker   FROM car_names   JOIN model_list ON car_names.Model = model_list.Model   JOIN car_makers ON model_list.Maker = car_makers.Maker   JOIN cars_data ON car_names.MakeId = cars_data.Id   WHERE cars_data.Cylinders <= 3 AND cars_data.Horsepower > (    SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.MakeId, car_makers.Maker   FROM car_names   INNER JOIN model_list ON car_names.Model = model_list.Model   INNER JOIN car_makers ON model_list.Maker = car_makers.Maker   INNER JOIN cars_data ON car_names.MakeId = cars_data.Id   WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT MAX(MPG) FROM cars_data WHERE Cylinders=8 AND Year<1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT model_list.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Maker  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Weight < 3500  AND car_makers.FullName <> 'Ford Motor Company'
SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.Model INNER JOIN car_makers ON car_names.MakeId = car_makers.Id INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company';
SELECT CountryName FROM countries  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE car_makers.Id IS NULL;
SELECT CountryName FROM countries  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE Maker IS NULL;
SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Id FROM car_makers GROUP BY Id HAVING COUNT(DISTINCT Model) >= 2) AND Id IN (SELECT Id FROM car_makers GROUP BY Id HAVING COUNT(DISTINCT Country) > 3);
SELECT car_makers.Id, car_makers.Maker   FROM car_makers   WHERE car_makers.Id IN     (SELECT model_list.Maker      FROM model_list      WHERE model_list.Maker = car_makers.Maker      GROUP BY model_list.Maker      HAVING COUNT(DISTINCT model_list.Model) >= 2)     AND car_makers.Id IN     (SELECT car_names.MakeId      FROM car_names      GROUP BY car_names.MakeId      HAVING COUNT(DISTINCT car_names.Model) > 3);
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country INNER JOIN model_list ON car_makers.Maker = model_list.Maker WHERE countries.CountryId IN (     SELECT countries.CountryId     FROM car_makers     INNER JOIN countries ON car_makers.Country = countries.CountryId     GROUP BY countries.CountryId     HAVING COUNT(DISTINCT car_makers.Maker) > 3 ) OR model_list.Model = 'fiat';
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (   SELECT car_makers.Country   FROM car_makers   GROUP BY car_makers.Country   HAVING COUNT(DISTINCT car_makers.Maker) > 3 ) OR countries.CountryId IN (   SELECT countries.CountryId   FROM countries   INNER JOIN car_makers ON countries.CountryId = car_makers.Country   INNER JOIN model_list ON car_makers.Maker = model_list.Maker   WHERE model_list.Model = 'fiat' );
SELECT Country  FROM airlines  WHERE Airline = "JetBlue Airways";
SELECT Country  FROM airlines  WHERE Airline = 'Jetblue Airways'
SELECT Abbreviation FROM airlines WHERE Airline='JetBlue Airways'
SELECT Abbreviation  FROM airlines  WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA'
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA';
SELECT AirportCode, AirportName  FROM airports  WHERE City = 'Anthony'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline  FROM airlines  WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM airlines WHERE Country='USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportCode = 'Alton';
SELECT City, Country FROM airports WHERE AirportCode = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName  FROM airports  WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City='Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights  WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport='ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE SourceAirport IN (   SELECT AirportCode FROM airports   WHERE City = 'Aberdeen' );
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE DestAirport IN (     SELECT AirportCode FROM airports     WHERE City = 'Aberdeen' )
SELECT COUNT(*) FROM flights  WHERE DestAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airports AS source ON flights.SourceAirport = source.AirportCode  JOIN airports AS dest ON flights.DestAirport = dest.AirportCode  WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT COUNT(*) FROM flights  WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE Airline='JetBlue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights  WHERE Airline='United Airlines' AND SourceAirport='AHD'
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines'  AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights  JOIN airlines ON airlines.Abbreviation = flights.Airline  JOIN airports ON airports.AirportCode = flights.DestAirport  WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport  GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT flights.SourceAirport AS City, COUNT(*) AS num_departures FROM flights GROUP BY flights.SourceAirport ORDER BY num_departures DESC LIMIT 1;
SELECT flights.SourceAirport, COUNT(*) AS freq   FROM flights   GROUP BY flights.SourceAirport   ORDER BY freq DESC   LIMIT 1;
SELECT AirportCode FROM airports  WHERE AirportCode IN  (SELECT SourceAirport FROM flights  UNION ALL  SELECT DestAirport FROM flights  GROUP BY 1  ORDER BY COUNT(*) DESC  LIMIT 1);
SELECT flights.DestAirport, COUNT(*) AS num_flights FROM flights GROUP BY flights.DestAirport ORDER BY num_flights DESC LIMIT 1;
SELECT AirportCode FROM airports  WHERE AirportCode NOT IN  (SELECT SourceAirport FROM flights  UNION SELECT DestAirport FROM flights)  ORDER BY RANDOM() LIMIT 1;
SELECT AirportCode  FROM airports  WHERE AirportCode = (     SELECT SourceAirport      FROM flights      GROUP BY SourceAirport      ORDER BY COUNT(*) ASC      LIMIT 1  );
SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1;
SELECT Abbreviation, Country  FROM airlines  WHERE uid = (SELECT Airline               FROM flights               GROUP BY Airline               ORDER BY COUNT(*) ASC               LIMIT 1)
SELECT Abbreviation, Country  FROM airlines  WHERE uid = (SELECT Airline               FROM flights               GROUP BY Airline               ORDER BY COUNT(*)               LIMIT 1);
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.Abbreviation = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD';
SELECT Airlines.Airline  FROM  Airlines  INNER JOIN  Flights  ON Airlines.Abbreviation = Flights.Airline  WHERE  Flights.SourceAirport = 'AHD'
SELECT airlines.Airline, airlines.Abbreviation, airlines.Country  FROM airlines  INNER JOIN flights ON airlines.Airline = flights.Airline  INNER JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD';
SELECT Airline  FROM  flights  WHERE  DestAirport = 'AHD';
SELECT DISTINCT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.Abbreviation = flights.Airline  INNER JOIN airports AS source ON flights.SourceAirport = source.AirportCode  INNER JOIN airports AS dest ON flights.DestAirport = dest.AirportCode  WHERE source.AirportCode = 'APG' AND dest.AirportCode = 'CVO';
SELECT Airline FROM flights WHERE SourceAirport='APG' AND Airline IN (SELECT Airline FROM flights WHERE SourceAirport='CVO')
SELECT Airlines.Airline  FROM Airlines  INNER JOIN flights ON Airlines.Abbreviation = flights.Airline  WHERE flights.SourceAirport = 'CVO' AND Airlines.Abbreviation NOT IN  (SELECT flights.Airline FROM flights WHERE flights.SourceAirport = 'APG');
SELECT Airlines.Airline  FROM Airlines  INNER JOIN Flights ON Airlines.Airline = Flights.Airline  WHERE Flights.SourceAirport = 'CVO'  AND Airlines.Airline NOT IN  (SELECT Airlines.Airline  FROM Airlines  INNER JOIN Flights ON Airlines.Airline = Flights.Airline  WHERE Flights.SourceAirport = 'APG')
SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)
SELECT Airline FROM flights  GROUP BY Airline  HAVING COUNT(*) >= 10;
SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200);
SELECT Airline FROM flights  GROUP BY Airline  HAVING COUNT(*) < 200
SELECT FlightNo  FROM flights  WHERE Airline = "United Airlines";
SELECT FlightNo  FROM flights  WHERE Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'APG'
SELECT flights.FlightNo  FROM flights  INNER JOIN airports  ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = "APG"
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT flights.FlightNo  FROM flights  INNER JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'Aberdeen'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');
SELECT Airports.AirportName FROM Airports LEFT JOIN flights ON Airports.AirportCode = flights.SourceAirport OR Airports.AirportCode = flights.DestAirport WHERE flights.Airline IS NULL;
SELECT airports.AirportCode  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE flights.FlightNo IS NULL
SELECT COUNT(*) FROM employee;
SELECT COUNT(Employee_ID) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name  FROM employee  ORDER BY Age ASC
SELECT City, COUNT(Employee_ID)  FROM employee  GROUP BY City
SELECT City, COUNT(Employee_ID)   FROM employee   GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
SELECT City  FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(*) > 1
SELECT Location, COUNT(Shop_ID)   FROM shop   GROUP BY Location
SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location;
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT shop.Manager_name, shop.District  FROM shop  WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT Name, Location, District  FROM shop  ORDER BY Number_products DESC;
SELECT Name, Location, District  FROM shop  ORDER BY Number_products DESC
SELECT Name FROM shop  WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT employee.Name  FROM employee  JOIN evaluation  ON employee.Employee_ID = evaluation.Employee_ID  GROUP BY employee.Employee_ID  ORDER BY COUNT(evaluation.Year_awarded) DESC  LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID IN (     SELECT Employee_ID     FROM evaluation     GROUP BY Employee_ID     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT Name FROM employee WHERE Employee_ID IN (   SELECT Employee_ID    FROM evaluation   WHERE Bonus = (     SELECT MAX(Bonus)      FROM evaluation   ) );
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT Employee_ID, Name FROM employee WHERE Employee_ID NOT IN (     SELECT Employee_ID      FROM evaluation )
SELECT Name FROM employee  WHERE Employee_ID NOT IN  (SELECT Employee_ID FROM evaluation)
SELECT Name FROM shop  WHERE Shop_ID = (     SELECT Shop_ID FROM hiring      GROUP BY Shop_ID      ORDER BY COUNT(Employee_ID) DESC      LIMIT 1 )
SELECT shop.Name  FROM shop  INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  GROUP BY shop.Name  ORDER BY COUNT(hiring.Employee_ID) DESC  LIMIT 1;
SELECT shop.Name  FROM shop  LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name  FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name
SELECT shop.Name, COUNT(hiring.Employee_ID) AS Employee_Count FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID;
SELECT SUM(Bonus) FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT District  FROM shop  WHERE Number_products < 3000 AND Shop_ID IN (SELECT Shop_ID FROM shop WHERE Number_products > 10000)
SELECT shop.District  FROM  shop  WHERE  shop.Number_products < 3000 AND  shop.District IN (     SELECT DISTINCT shop.District      FROM shop      WHERE shop.Number_products > 10000 )
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents
SELECT COUNT(*) FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description   FROM Documents
SELECT Documents.Document_Name, Documents.Template_ID   FROM Documents   WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID  FROM Documents  WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description   FROM Documents   INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID   WHERE Documents.Document_Name = 'Robbin CV'
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Templates.Template_ID) AS Num_Different_Templates  FROM Documents  INNER JOIN Templates  ON Documents.Template_ID = Templates.Template_ID
SELECT COUNT(DISTINCT Template_ID)  FROM Documents
SELECT COUNT(*)  FROM Documents  WHERE Template_ID IN  (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT COUNT(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT Templates.Template_ID, COUNT(Documents.Document_ID)  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code  FROM Templates  INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1;
SELECT Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Document_ID) > 1;
SELECT Template_ID FROM Templates WHERE Template_ID IN (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(DISTINCT Document_ID) > 1 )
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Document_ID IS NULL;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code  FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code   FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_Type_Code  FROM Ref_Template_Types
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Version_Number, Template_Type_Code  FROM Templates  WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID)  FROM Ref_Template_Types  LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code, COUNT(Template_ID)  FROM Templates  GROUP BY Template_Type_Code
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code IN (     SELECT Template_Type_Code      FROM Templates      GROUP BY Template_Type_Code      HAVING COUNT(Template_ID) < 3  )
SELECT Ref_Template_Types.Template_Type_Code  FROM Ref_Template_Types  WHERE Ref_Template_Types.Template_Type_Code NOT IN  (SELECT Templates.Template_Type_Code FROM Templates  GROUP BY Templates.Template_Type_Code  HAVING COUNT(*) >= 3)
SELECT Templates.Template_Type_Code, MIN(Templates.Version_Number) AS Smallest_Version_Number  FROM Templates  GROUP BY Templates.Template_Type_Code
SELECT Templates.Template_Type_Code, MIN(Templates.Version_Number) AS Lowest_Version_Number FROM Templates GROUP BY Templates.Template_Type_Code;
SELECT Templates.Template_Type_Code FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT Templates.Template_Type_Code FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT Documents.Document_Name  FROM Documents  INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID  INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'
SELECT Documents.Document_Name  FROM Documents  INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID  INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID)   FROM Ref_Template_Types   LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code   LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID   GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID)   FROM Ref_Template_Types   LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code   LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID   GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Templates.Template_Type_Code  FROM  Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY  Templates.Template_Type_Code  ORDER BY  COUNT(Documents.Document_ID) DESC  LIMIT 1;
SELECT Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code  FROM Ref_Template_Types  LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  WHERE Templates.Template_Type_Code IS NULL
SELECT Ref_Template_Types.Template_Type_Code  FROM Ref_Template_Types  LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  WHERE Templates.Template_ID IS NULL;
SELECT Template_Type_Code, Template_Type_Description  FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description  FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Description  FROM  Ref_Template_Types  WHERE  Template_Type_Code = 'AD'
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = "Book";
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book"
SELECT Ref_Template_Types.Template_Type_Description  FROM Ref_Template_Types  INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Ref_Template_Types.Template_Type_Description
SELECT Templates.Template_Type_Description FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Description
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types  ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = "Presentation"
SELECT Template_ID  FROM Templates  WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*)  FROM Paragraphs  INNER JOIN Documents  ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Summer Show'
SELECT COUNT(*)  FROM Paragraphs  WHERE Document_ID = (     SELECT Document_ID      FROM Documents      WHERE Document_Name = 'Summer Show' )
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'
SELECT Paragraph_ID, Paragraph_Text  FROM Paragraphs  WHERE Document_ID = (    SELECT Document_ID     FROM Documents     WHERE Document_Name = 'Welcome to NY' )
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Welcome to NY' )
SELECT Paragraph_Text FROM Paragraphs   INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID   WHERE Documents.Document_Name = "Customer reviews";
SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  ORDER BY Documents.Document_ID
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;
SELECT Documents.Document_ID FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2
SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  JOIN (   SELECT Document_ID, COUNT(*) as num_paragraphs    FROM Paragraphs    GROUP BY Document_ID    ORDER BY num_paragraphs DESC    LIMIT 1 ) max_paragraphs ON Documents.Document_ID = max_paragraphs.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  WHERE Documents.Document_ID = (     SELECT Document_ID      FROM Paragraphs      GROUP BY Document_ID      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT Documents.Document_ID  FROM Documents  INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC  LIMIT 1;
SELECT Documents.Document_ID  FROM Documents  INNER JOIN  (SELECT Document_ID, COUNT(*) AS Paragraph_Count   FROM Paragraphs   GROUP BY Document_ID   ORDER BY Paragraph_Count ASC   LIMIT 1) AS Min_Paragraphs  ON Documents.Document_ID = Min_Paragraphs.Document_ID
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_ID IN (     SELECT Paragraphs.Document_ID     FROM Paragraphs     GROUP BY Paragraphs.Document_ID     HAVING COUNT(*) >= 1 AND COUNT(*) <= 2 )
SELECT Documents.Document_ID  FROM Documents  INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%'
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name, Age, Hometown  FROM teacher
SELECT Name, Age, Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age IN (32,33);
SELECT Name  FROM teacher  WHERE Age = 32 OR Age = 33;
SELECT teacher.Hometown FROM teacher  WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown, COUNT(*) AS 'Number of Teachers' FROM teacher GROUP BY teacher.Hometown;
SELECT Hometown, COUNT(Teacher_ID)   FROM teacher   GROUP BY Hometown;
SELECT Hometown, COUNT(*) as frequency  FROM teacher  GROUP BY Hometown  ORDER BY frequency DESC  LIMIT 1;
SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(*) > 1;
SELECT Hometown  FROM teacher  GROUP BY Hometown  HAVING COUNT(DISTINCT Teacher_ID) >= 2
SELECT teacher.Name, course.Course  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  INNER JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course   FROM teacher   INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID   INNER JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  ORDER BY teacher.Name ASC
SELECT teacher.Name  FROM course_arrange  INNER JOIN course ON course_arrange.Course_ID = course.Course_ID  INNER JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID  WHERE course.Course = "math";
SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  INNER JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'math'
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID)  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name;
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL;
SELECT teacher.Name  FROM teacher  LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  WHERE course_arrange.Course_ID IS NULL
SELECT COUNT(*) FROM visitor WHERE Age < 30
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Age ASC
SELECT Museum_ID, Name FROM museum  WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT Open_Year, Num_of_Staff  FROM museum  WHERE Name = 'Plaza Museum';
SELECT Name  FROM museum  WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Museum_ID IN      (SELECT Museum_ID       FROM visit       GROUP BY Museum_ID       HAVING COUNT(*) > 1) GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT Museum_ID, Name  FROM museum  WHERE Museum_ID = (     SELECT Museum_ID      FROM visit      GROUP BY Museum_ID      ORDER BY SUM(Num_of_Ticket) DESC      LIMIT 1 )
SELECT Name FROM museum WHERE Museum_ID NOT IN (     SELECT Museum_ID FROM visit )
SELECT visitor.Name, visitor.Age  FROM visit  JOIN visitor ON visit.visitor_ID = visitor.ID  WHERE visit.Num_of_Ticket = (     SELECT MAX(Num_of_Ticket)      FROM visit )
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;
SELECT SUM(Total_spent)  FROM visit  INNER JOIN visitor ON visit.visitor_ID = visitor.ID  WHERE visitor.Level_of_membership = 1
SELECT visitor.Name  FROM visitor  INNER JOIN visit ON visitor.ID = visit.visitor_ID  INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID  WHERE museum.Open_Year < 2009 AND museum.Open_Year > 2011
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE visitor_ID NOT IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(player_id) FROM players
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name)  FROM matches
SELECT COUNT(DISTINCT loser_name) AS num_of_loser_names   FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10;
SELECT winner_name  FROM matches  WHERE year = 2013 AND winner_name IN (     SELECT winner_name      FROM matches      WHERE year = 2016  )
SELECT players.first_name, players.last_name  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE strftime('%Y', tourney_date) = '2013' AND players.player_id IN  (SELECT winner_id FROM matches WHERE strftime('%Y', tourney_date) = '2016')  GROUP BY players.player_id  HAVING COUNT(DISTINCT strftime('%Y', tourney_date)) = 2;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND EXISTS (SELECT 1 FROM matches WHERE tourney_name = 'Australian Open' AND winner_id = matches.winner_id)
SELECT players.first_name, players.country_code   FROM players   INNER JOIN matches ON players.player_id = matches.winner_id   WHERE matches.tourney_name = 'WTA Championships' AND         matches.tourney_id = 'w-wt6-01a' AND         EXISTS (SELECT 1 FROM matches                 WHERE matches.winner_id = players.player_id AND                       matches.tourney_name = 'Australian Open' AND                       matches.tourney_id = 'w-aus-01a');
SELECT players.first_name, players.country_code  FROM players  WHERE players.birth_date = (SELECT MIN(birth_date) FROM players)
SELECT players.first_name, players.country_code  FROM players  WHERE players.birth_date = (SELECT MIN(birth_date) FROM players)
SELECT first_name, last_name FROM players ORDER BY birth_date ASC;
SELECT first_name || ' ' || last_name AS full_name  FROM players  ORDER BY birth_date ASC;
SELECT first_name, last_name  FROM  players  WHERE  hand = 'L'  ORDER BY  birth_date ASC;
SELECT first_name || ' ' || last_name AS full_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date;
SELECT players.first_name, players.country_code  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id  WHERE rankings.tours = (     SELECT MAX(tours)      FROM rankings );
SELECT players.first_name, players.country_code  FROM players  JOIN rankings  ON players.player_id = rankings.player_id  WHERE tours = (     SELECT MAX(tours)      FROM rankings )
SELECT year  FROM matches  GROUP BY year  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT year, COUNT(*) AS match_count   FROM matches   GROUP BY year   ORDER BY match_count DESC   LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches WHERE winner_name = (     SELECT winner_name     FROM matches     GROUP BY winner_name     ORDER BY COUNT(*) DESC     LIMIT 1 ) ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name, MAX(wins.ranking_points) FROM (     SELECT winner_id, COUNT(*) as total_wins, MAX(winner_rank_points) as ranking_points     FROM matches     GROUP BY winner_id ) wins JOIN players ON players.player_id = wins.winner_id WHERE wins.total_wins = (     SELECT MAX(total_wins)     FROM (         SELECT winner_id, COUNT(*) as total_wins         FROM matches         GROUP BY winner_id     ) subquery ) GROUP BY winner_name;
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')
SELECT players.first_name || ' ' || players.last_name AS winner_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open'  ORDER BY matches.winner_rank_points DESC  LIMIT 1;
SELECT loser_name, winner_name  FROM matches  WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name  FROM matches  WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id, players.first_name
SELECT first_name, AVG(ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points   FROM players   INNER JOIN rankings ON players.player_id = rankings.player_id   GROUP BY players.player_id;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT country_code, COUNT(*) as player_count  FROM players  GROUP BY country_code;
SELECT country_code, COUNT(player_id)   FROM players   GROUP BY country_code;
SELECT country_code  FROM players  GROUP BY country_code  ORDER BY COUNT(player_id) DESC  LIMIT 1;
SELECT country_code  FROM players  GROUP BY country_code  ORDER BY COUNT(player_id) DESC  LIMIT 1;
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(DISTINCT tours) as total_tours  FROM rankings  GROUP BY ranking_date
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours  FROM rankings  GROUP BY ranking_date
SELECT year, COUNT(*) as num_matches   FROM matches   GROUP BY year;
SELECT year, COUNT(*) AS num_matches   FROM matches   GROUP BY year;
SELECT winner_name, winner_rank FROM matches WHERE winner_age IN (SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3) ORDER BY winner_age;
SELECT winner_name, winner_rank FROM matches  WHERE winner_age IN (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 3) ORDER BY winner_age ASC, winner_rank ASC;
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(*) FROM matches  WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code, players.birth_date FROM players  JOIN matches ON players.player_id = matches.winner_id  JOIN rankings ON players.player_id = rankings.player_id  WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date  FROM players  INNER JOIN matches ON players.player_id = matches.winner_id  INNER JOIN rankings ON players.player_id = rankings.player_id  WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT hand, COUNT(*)   FROM players   GROUP BY hand;
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT ship.name, ship.tonnage  FROM ship  ORDER BY ship.name DESC
SELECT name, date, result FROM battle;
SELECT MAX(killed + injured) as max_death_toll, MIN(killed + injured) as min_death_toll  FROM death;
SELECT AVG(injured) FROM death
SELECT death.note, death.killed, death.injured  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT battle.id, battle.name  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name  FROM    battle    JOIN      (SELECT         caused_by_ship_id,         SUM(killed) AS total_killed       FROM         death       GROUP BY         caused_by_ship_id       HAVING         total_killed > 10)      AS deaths      ON battle.id = deaths.caused_by_ship_id;
SELECT ship.id, ship.name  FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1
SELECT DISTINCT name FROM battle WHERE bulgarian_commander='Kaloyan' AND latin_commander='Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle
SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN (     SELECT DISTINCT lost_in_battle     FROM ship     WHERE tonnage = 225 ) AS lost_ships ON battle.id = lost_ships.lost_in_battle WHERE lost_ships.lost_in_battle IS NULL AND result <> 'defeat'
SELECT battle.name, battle.date  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.name IN ('Lettice', 'HMS Atalanta')
SELECT battle.name, battle.result, battle.bulgarian_commander  FROM battle  LEFT JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.id IS NULL AND ship.location = 'English Channel'
SELECT note  FROM death  WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description  FROM  Courses  WHERE  course_name = 'math'
SELECT Courses.course_description  FROM Courses  INNER JOIN Sections ON Courses.course_id = Sections.course_id  WHERE Courses.course_name LIKE '%math%';
SELECT Addresses.zip_postcode  FROM Addresses  WHERE Addresses.city = 'Port Chelsea'
SELECT Addresses.zip_postcode  FROM Addresses  WHERE Addresses.city = 'Port Chelsea';
SELECT Departments.department_id, Departments.department_name   FROM Departments  INNER JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id  GROUP BY Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1;
SELECT Departments.department_id, Departments.department_name   FROM Departments   INNER JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id   GROUP BY Departments.department_id   ORDER BY COUNT(Degree_Programs.degree_program_id) DESC   LIMIT 1;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id)  FROM Degree_Programs;
SELECT COUNT(DISTINCT Degree_Programs.degree_program_id)  FROM Degree_Programs  INNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'engineering'
SELECT COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs INNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'
SELECT Sections.section_name, Sections.section_description FROM Sections
SELECT Sections.section_name, Sections.section_description   FROM Sections
SELECT Courses.course_id, Courses.course_name  FROM Courses  WHERE Courses.course_id IN (     SELECT course_id      FROM Sections      GROUP BY course_id      HAVING COUNT(*) <= 2  )
SELECT course_id, course_name   FROM Courses   WHERE course_id IN      (SELECT course_id       FROM Sections       GROUP BY course_id       HAVING COUNT(*) < 2);
SELECT section_name  FROM Sections  ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT Semesters.semester_id, Semesters.semester_name   FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id   ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1;
SELECT Semesters.semester_id, Semesters.semester_name  FROM Semesters  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1;
SELECT Departments.department_description  FROM Departments  WHERE department_name LIKE '%computer%';
SELECT Departments.department_description  FROM Departments  WHERE Departments.department_name LIKE '%computer%'
SELECT students.first_name, students.middle_name, students.last_name, students.student_id  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  WHERE student_enrolment.degree_program_id IN (SELECT degree_program_id FROM student_enrolment WHERE semester_id = 1 GROUP BY degree_program_id HAVING COUNT(*) = 2)  AND student_enrolment.semester_id = 1  GROUP BY students.student_id  HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Student_Enrolment.semester_id IN (     SELECT semester_id      FROM Student_Enrolment      GROUP BY semester_id      HAVING COUNT(DISTINCT degree_program_id) = 2 ) GROUP BY Students.student_id  HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%'
SELECT Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.student_id) AS num_students FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY num_students DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name FROM Student_Enrolment INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_id) AS enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollments DESC LIMIT 1;
SELECT Semesters.semester_name  FROM Semesters  LEFT JOIN Student_Enrolment  ON Semesters.semester_id = Student_Enrolment.semester_id  WHERE Student_Enrolment.student_enrolment_id IS NULL;
SELECT Semesters.semester_name  FROM Semesters  LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  WHERE Student_Enrolment.student_enrolment_id IS NULL;
SELECT Courses.course_name  FROM Courses  INNER JOIN Sections ON Courses.course_id = Sections.course_id  INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.section_id
SELECT Courses.course_name  FROM Courses  INNER JOIN Sections ON Courses.course_id = Sections.course_id  INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id  INNER JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id  GROUP BY Courses.course_name;
SELECT Courses.course_name  FROM Courses  JOIN Sections ON Courses.course_id = Sections.course_id  JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id  JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id  GROUP BY Courses.course_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Courses.course_name  FROM  Courses  INNER JOIN  Sections ON Courses.course_id = Sections.course_id  INNER JOIN  Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id  GROUP BY  Courses.course_id  ORDER BY  COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC  LIMIT 1
SELECT Students.last_name  FROM Students  LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  WHERE Students.state_province_county = 'North Carolina' AND Student_Enrolment.student_enrolment_id IS NULL;
SELECT Students.last_name  FROM Students  WHERE Students.state_province_county = 'North Carolina'  AND NOT EXISTS  (SELECT 1 FROM Student_Enrolment WHERE Student_Enrolment.student_id = Students.student_id)
SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts INNER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2;
SELECT Transcripts.transcript_id, Transcripts.transcript_date FROM Transcripts INNER JOIN Transcript_Contents ON Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY Transcripts.transcript_id HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2;
SELECT Students.cell_mobile_number  FROM Students  WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT Students.cell_mobile_number  FROM  Students  WHERE  Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  WHERE Students.date_first_registered = (     SELECT MIN(date_first_registered)      FROM Students )  LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Transcript_Contents ON Student_Enrolment.student_enrolment_id = Transcript_Contents.student_course_id INNER JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id  JOIN Sections ON Student_Enrolment_Courses.course_id = Sections.course_id  JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id  JOIN Transcripts ON Transcripts.transcript_id = Transcript_Contents.transcript_id  JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id  WHERE Courses.course_name LIKE '%Graduation%'  ORDER BY Transcripts.transcript_date ASC  LIMIT 1;
SELECT Students.first_name FROM Students WHERE Students.current_address_id <> Students.permanent_address_id;
SELECT Students.first_name  FROM Students  WHERE Students.current_address_id != Students.permanent_address_id;
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY COUNT(Students.student_id) DESC LIMIT 1;
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2  FROM Addresses  INNER JOIN Students ON Addresses.address_id = Students.current_address_id  GROUP BY Addresses.address_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT AVG(strftime('%s', transcript_date)) AS avg_transcript_date FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT MIN(transcript_date), other_details FROM Transcripts;
SELECT COUNT(transcript_id) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts
SELECT Student_Enrolment_Courses.student_course_id, COUNT(*) as max_count   FROM Student_Enrolment_Courses   JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id   GROUP BY Student_Enrolment_Courses.student_course_id   ORDER BY max_count DESC   LIMIT 1;
SELECT Student_Enrolment_Courses.student_enrolment_id, COUNT(*) as num_of_transcripts   FROM Student_Enrolment_Courses   GROUP BY Student_Enrolment_Courses.course_id   ORDER BY num_of_transcripts DESC   LIMIT 1;
SELECT Transcripts.transcript_id, Transcripts.transcript_date   FROM Transcripts   JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id   GROUP BY Transcripts.transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1;
SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Semesters.semester_name  FROM  Semesters  INNER JOIN Student_Enrolment  ON Semesters.semester_id = Student_Enrolment.semester_id  INNER JOIN Degree_Programs  ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  INNER JOIN Students  ON Student_Enrolment.student_id = Students.student_id  WHERE Degree_Programs.degree_summary_name IN ('Bachelor', 'Master') GROUP BY Semesters.semester_name  HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2
SELECT Semesters.semester_id  FROM Semesters  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name IN ('Masters','Bachelors')  GROUP BY Semesters.semester_id  HAVING COUNT(DISTINCT Student_Enrolment.student_id) > 1;
SELECT COUNT(DISTINCT Students.current_address_id) AS num_current_addresses FROM Students
SELECT Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details FROM Addresses  JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT student_id, first_name, middle_name, last_name, email_address, cell_mobile_number, ssn, date_first_registered, date_left, current_address_id, permanent_address_id, other_student_details FROM Students ORDER BY last_name DESC
SELECT * FROM Sections WHERE section_name = 'h';
SELECT Sections.section_description   FROM Sections   WHERE Sections.section_name = 'h'
SELECT Students.first_name  FROM Students  WHERE Students.permanent_address_id IN  (SELECT Addresses.address_id FROM Addresses WHERE Addresses.country = 'Haiti') OR Students.cell_mobile_number = '09700166582';
SELECT Students.first_name  FROM  Students  INNER JOIN  Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE  Addresses.country = 'Haiti'  OR  Students.cell_mobile_number = '09700166582'
SELECT Title  FROM Cartoon  ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT Cartoon.Title, Cartoon.Directed_by   FROM Cartoon   ORDER BY Cartoon.Original_air_date ASC
SELECT Cartoon.Title, Cartoon.Directed_by  FROM Cartoon  ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title  FROM Cartoon  WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti';
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(*) AS TV_Channel_Count   FROM TV_Channel   GROUP BY Country   ORDER BY TV_Channel_Count DESC   LIMIT 1;
SELECT Country, COUNT(*) AS num_channels  FROM TV_Channel  GROUP BY Country  ORDER BY num_channels DESC  LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Package_Option  FROM  TV_Channel  WHERE  series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT Language, COUNT(*) AS Number_of_TV_Channels  FROM TV_Channel  GROUP BY Language  ORDER BY Number_of_TV_Channels ASC  LIMIT 1;
SELECT Language, COUNT(*) as Num_Channels FROM TV_Channel GROUP BY Language ORDER BY Num_Channels ASC LIMIT 1;
SELECT Language, COUNT(*) as Number_of_Channels   FROM TV_Channel   GROUP BY Language;
SELECT Language, COUNT(*) AS "Number of Channels"  FROM TV_Channel  GROUP BY Language
SELECT TV_Channel.series_name  FROM TV_Channel  INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name  FROM TV_Channel  INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT Cartoon.Title FROM Cartoon  INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title  FROM Cartoon  INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = "Sky Radio"
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating DESC;
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating DESC
SELECT TV_series.Episode, TV_series.Rating   FROM TV_series   ORDER BY TV_series.Rating DESC   LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT Air_Date  FROM  TV_series  WHERE  Episode = "A Love of a Lifetime"
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Weekly_Rank  FROM TV_series  WHERE Episode = "A Love of a Lifetime"
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT series_name  FROM TV_Channel  JOIN TV_series  ON TV_Channel.id = TV_series.Channel  WHERE Episode = "A Love of a Lifetime"
SELECT TV_series.Episode  FROM TV_Channel  INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.series_name = "Sky Radio"
SELECT Episode  FROM TV_series  WHERE Channel = 'Sky Radio'
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) AS Num_Cartoons   FROM Cartoon   GROUP BY Directed_by
SELECT Cartoon.Production_code, Cartoon.Channel  FROM Cartoon  WHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel  FROM Cartoon  WHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)
SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  WHERE TV_Channel.Hight_definition_TV = 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 1;
SELECT TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'
SELECT TV_Channel.Country  FROM TV_Channel  INNER JOIN Cartoon  ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey'
SELECT TV_Channel.Country  FROM TV_Channel  WHERE TV_Channel.id NOT IN  (SELECT Cartoon.Channel  FROM Cartoon  WHERE Cartoon.Written_by = 'Todd Casey');
SELECT Country  FROM TV_Channel  WHERE id NOT IN      (SELECT Channel       FROM Cartoon       WHERE Written_by = 'Todd Casey')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, Country   FROM TV_Channel  WHERE Language != 'English'
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English'
SELECT TV_Channel.id  FROM TV_Channel  WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2);
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.id  HAVING COUNT(TV_Channel.id) > 2
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel      FROM Cartoon      WHERE Cartoon.Directed_by = 'Ben Jones' );
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT TV_Channel.Package_Option  FROM TV_Channel  WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT TV_Channel.Package_Option  FROM TV_Channel  LEFT JOIN Cartoon  ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL
SELECT COUNT(*) FROM poker_player
SELECT COUNT(Poker_Player_ID) FROM poker_player;
SELECT Earnings  FROM poker_player  ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player
SELECT Poker_Player_ID, Final_Table_Made, Best_Finish  FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT people.Name FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID
SELECT Name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID
SELECT poker_player.Poker_Player_ID, people.Name  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  WHERE poker_player.Earnings > 300000;
SELECT Poker_Player_ID, People_ID FROM poker_player WHERE Earnings > 300000;
SELECT p.people_name  FROM poker_player AS pp  JOIN people AS p ON pp.people_id = p.people_id  ORDER BY pp.final_table_made ASC;
SELECT poker_player.Poker_Player_ID, people.Name  FROM poker_player  INNER JOIN people  ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Birth_Date  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player)
SELECT people.Birth_Date  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT p.Money_Rank  FROM poker_player p  INNER JOIN people pe ON p.People_ID = pe.People_ID  WHERE pe.Height = (SELECT MAX(Height) FROM people)
SELECT poker_player.Money_Rank  FROM  poker_player  JOIN  people ON poker_player.People_ID = people.People_ID  WHERE  people.Height = (SELECT MAX(Height) FROM people)
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(Earnings) FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  WHERE Height > 200;
SELECT poker_player.Poker_Player_ID, people.Name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC
SELECT p.Name  FROM poker_player AS pp  JOIN people AS p ON pp.People_ID = p.People_ID  ORDER BY pp.Earnings DESC
SELECT people.Nationality, COUNT(people.People_ID)  FROM people  GROUP BY people.Nationality;
SELECT Nationality, COUNT(People_ID)   FROM people   GROUP BY Nationality;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality  FROM people  GROUP BY Nationality  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT DISTINCT p1.Nationality  FROM people p1, people p2  WHERE p1.People_ID <> p2.People_ID  AND p1.Nationality = p2.Nationality
SELECT Nationality  FROM people  GROUP BY Nationality  HAVING COUNT(People_ID) >= 2;
SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name  FROM people  WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state  FROM VOTES;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES WHERE state='CA'
SELECT contestant_name  FROM  CONTESTANTS  WHERE  contestant_name != 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES;
SELECT contestant_number, contestant_name  FROM  CONTESTANTS  WHERE  contestant_number IN  (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2);
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (     SELECT contestant_number      FROM VOTES      GROUP BY contestant_number      ORDER BY COUNT(*) ASC      LIMIT 1 )
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT state, COUNT(*) AS vote_count  FROM VOTES  GROUP BY state  ORDER BY vote_count DESC  LIMIT 1;   ### What is the name of the contestant who won the most votes in each state?  SELECT state, contestant_name  FROM (SELECT state, contestant_name, COUNT(*) AS vote_count        FROM VOTES        JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number        GROUP BY state, contestant_name        ORDER BY state, vote_count DESC)  GROUP BY state;   ### What is the total number of votes cast in each state?  SELECT state, COUNT(*) AS vote_count  FROM VOTES  GROUP BY state;   ### What is the total number of votes cast for each contestant?  SELECT contestant_name, COUNT(*) AS vote_count  FROM VOTES  JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  GROUP BY contestant_name;   ### What is the phone number that cast the most votes?  SELECT phone_number, COUNT(*) AS vote_count  FROM VOTES  GROUP BY phone_number  ORDER BY vote_count DESC  LIMIT 1;
SELECT VOTES.created, VOTES.state, VOTES.phone_number  FROM VOTES  JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT AREA_CODE_STATE.area_code  FROM AREA_CODE_STATE  INNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state  INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' AND AREA_CODE_STATE.area_code IN      (SELECT AREA_CODE_STATE.area_code      FROM AREA_CODE_STATE      INNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state      INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number      WHERE CONTESTANTS.contestant_name = 'Kelly Clauss')  GROUP BY AREA_CODE_STATE.area_code  HAVING COUNT(DISTINCT CONTESTANTS.contestant_number) = 2;
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT Name  FROM country  WHERE IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region='Caribbean'
SELECT Continent FROM country WHERE Code = 'AIA'
SELECT Continent  FROM country  WHERE Code='AIA'
SELECT city.District  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE city.Name = "Kabul";
SELECT Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
SELECT Language  FROM countrylanguage  WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy  FROM country  WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name='Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Region='Central Africa';
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent='Africa' AND Region='Central Africa'
SELECT country.Name  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.LifeExpectancy ASC  LIMIT 1;
SELECT Name  FROM  country  WHERE  Continent='Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent='Asia')
SELECT SUM(country.Population), MAX(country.GNP)  FROM country  WHERE country.Continent = 'Asia'
SELECT SUM(city.Population), MAX(country.GNP)  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE country.Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea)  FROM country  WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(Population)  FROM city  WHERE District='Gelderland'
SELECT AVG(GNP), SUM(Population)  FROM country  WHERE GovernmentForm = 'US territory'
SELECT AVG(GNP), SUM(Population)   FROM country   WHERE Continent = 'North America' AND Region = 'Caribbean'
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm)  FROM country  WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm)  FROM country  WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) FROM countrylanguage  WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T'
SELECT country.Name  FROM  countrylanguage  JOIN country  ON countrylanguage.CountryCode = country.Code  GROUP BY  countrylanguage.CountryCode  ORDER BY  COUNT(countrylanguage.Language) DESC  LIMIT 1;
SELECT country.Name  FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  GROUP BY country.Code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT country.Continent  FROM  countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  GROUP BY  country.Continent  ORDER BY  COUNT(DISTINCT countrylanguage.Language) DESC  LIMIT 1;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY NumLanguages DESC LIMIT 1;
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch') AND cl.CountryCode IN (   SELECT cl2.CountryCode    FROM countrylanguage cl2    WHERE cl2.Language = 'English'   INTERSECT    SELECT cl3.CountryCode    FROM countrylanguage cl3    WHERE cl3.Language = 'Dutch' )
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage  WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T'
SELECT DISTINCT c.Name FROM country c INNER JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' INNER JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
SELECT DISTINCT c.Name  FROM country c  INNER JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' INNER JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
SELECT DISTINCT Country.Name  FROM Country  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE CountryLanguage.IsOfficial = 'T'  AND CountryLanguage.Language IN ('English', 'French')  GROUP BY Country.Name  HAVING COUNT(DISTINCT CountryLanguage.Language) = 2;
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT country.Continent)  FROM country  INNER JOIN countrylanguage  ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Chinese';
SELECT country.Region  FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE (Language = 'English' OR Language = 'Dutch')  AND IsOfficial = 'T'
SELECT country.Region  FROM countrylanguage  INNER JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language IN ('Dutch', 'English')
SELECT Country.Name  FROM Country  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE (CountryLanguage.Language = 'English' OR CountryLanguage.Language = 'Dutch') AND CountryLanguage.IsOfficial = 'T'
SELECT country.Name  FROM countrylanguage  JOIN country  ON countrylanguage.CountryCode = country.Code  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language  FROM    countrylanguage  JOIN    country  ON    countrylanguage.CountryCode = country.Code  WHERE    country.Continent = 'Asia'  ORDER BY    countrylanguage.Percentage DESC  LIMIT 1;
SELECT Language  FROM  countrylanguage  WHERE  CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')  AND  IsOfficial = 'T'  ORDER BY  Percentage DESC  LIMIT 1;
SELECT Language  FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode IN (SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%' AND Population > 0 AND Population < 10000000)  GROUP BY Language  HAVING COUNT(DISTINCT CountryCode) = 1
SELECT countrylanguage.Language  FROM      countrylanguage  JOIN      country ON countrylanguage.CountryCode = country.Code  WHERE      country.GovernmentForm = 'Republic' AND      (SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = country.Code) = 1
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 1 ORDER BY city.Population DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.SurfaceArea DESC  LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN  (SELECT CountryCode FROM countrylanguage WHERE IsOfficial='T' AND Language='English')
SELECT SUM(Population)  FROM country  WHERE Code NOT IN      (SELECT CountryCode       FROM countrylanguage       WHERE Language = 'English' AND IsOfficial = 'T')
SELECT SUM(city.Population) FROM city INNER JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' WHERE countrylanguage.IsOfficial != 'T' OR countrylanguage.IsOfficial IS NULL;
SELECT countrylanguage.Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language  FROM  countrylanguage  JOIN  country  ON  countrylanguage.CountryCode = country.Code  WHERE  country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT Language)  FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode IN (     SELECT Code FROM country WHERE IndepYear < 1930 )
SELECT COUNT(DISTINCT Language) FROM countrylanguage  WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'
SELECT Code, Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Code, Name  FROM country  WHERE SurfaceArea > (     SELECT MAX(SurfaceArea)      FROM country      WHERE Continent = 'Europe' )
SELECT Code, Name  FROM country  WHERE Continent = 'Africa'  AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT Code, Name  FROM    country  WHERE    Continent = 'Africa'  AND    Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT Name  FROM country  WHERE Continent = 'Asia' AND Population > ALL(SELECT Population FROM country WHERE Continent = 'Africa')
SELECT country.Name  FROM country  WHERE country.Continent = 'Asia'  AND country.Population > (     SELECT MAX(country.Population)     FROM country      WHERE country.Continent = 'Africa' )
SELECT Country.Code  FROM Country  WHERE Country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English')
SELECT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT DISTINCT CountryCode  FROM countrylanguage  WHERE Language != 'English'
SELECT Code  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' AND IsOfficial = 'T' ) AND GovernmentForm <> 'Republic'
SELECT Code  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')  AND GovernmentForm <> 'Republic';
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial <> 'T';
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'  AND country.Continent = 'Asia'  GROUP BY city.Name
SELECT city.Name  FROM city  INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  INNER JOIN country ON city.CountryCode = country.Code  WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT Name, IndepYear, SurfaceArea  FROM country  WHERE Population = (SELECT MIN(Population) FROM country)
SELECT country.Name, country.IndepYear, country.SurfaceArea   FROM country   WHERE country.Population = (SELECT MIN(Population) FROM country)
SELECT country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Name, country.Population, country.HeadOfState  FROM country  WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT country.Name, COUNT(countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Code  HAVING COUNT(countrylanguage.Language) >= 3
SELECT Country.Name, COUNT(DISTINCT CountryLanguage.Language) AS LanguageCount   FROM Country   JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode   GROUP BY Country.Code   HAVING LanguageCount > 2   ORDER BY LanguageCount DESC;
SELECT District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District;
SELECT District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  WHERE GovernmentForm IN      (SELECT GovernmentForm       FROM country       GROUP BY GovernmentForm       HAVING AVG(LifeExpectancy) > 72)  GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  WHERE GovernmentForm IN    (SELECT GovernmentForm     FROM country     WHERE LifeExpectancy > 72     GROUP BY GovernmentForm)  GROUP BY GovernmentForm
SELECT Continent, AVG(LifeExpectancy), SUM(Population)   FROM country   WHERE AVG(LifeExpectancy) < 72   GROUP BY Continent
SELECT   Continent, SUM(Population), AVG(LifeExpectancy) FROM country WHERE Continent IN (     SELECT Continent     FROM country     GROUP BY Continent     HAVING AVG(LifeExpectancy) < 72 ) GROUP BY Continent;
SELECT Name, SurfaceArea   FROM country   ORDER BY SurfaceArea DESC   LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name  FROM country  ORDER BY Population DESC  LIMIT 3;
SELECT Name  FROM  country  ORDER BY  Population DESC  LIMIT 3;
SELECT Name  FROM  country  ORDER BY Population ASC  LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT COUNT(*) FROM country WHERE continent='Asia'
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT AVG(SurfaceArea), SUM(Population) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT AVG(SurfaceArea), SUM(Population)  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name  FROM city  WHERE Population BETWEEN 160000 AND 900000;
SELECT Language  FROM countrylanguage  GROUP BY Language  ORDER BY COUNT(DISTINCT CountryCode) DESC  LIMIT 1;
SELECT Language FROM countrylanguage   GROUP BY Language   ORDER BY COUNT(DISTINCT CountryCode) DESC   LIMIT 1;
SELECT CountryCode, Language FROM countrylanguage WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)
SELECT country.Code, countrylanguage.Language  FROM country  INNER JOIN countrylanguage  ON country.Code=countrylanguage.CountryCode  WHERE countrylanguage.Percentage =  (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code)
SELECT COUNT(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(*)  FROM countrylanguage  WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT CountryCode  FROM countrylanguage  WHERE Language='Spanish' AND IsOfficial='T' AND Percentage>=50.0;
SELECT COUNT(*) FROM conductor
SELECT COUNT(Conductor_ID) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != "USA"
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT orchestra.Record_Company  FROM orchestra  ORDER BY orchestra.Year_of_Founded DESC
SELECT Orchestra.Record_Company FROM Orchestra ORDER BY Orchestra.Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show
SELECT AVG(Attendance) FROM show
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != "Live final";
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != "Live final";
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality)  FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor  WHERE Year_of_Work = (   SELECT MAX(Year_of_Work) FROM conductor )
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC  LIMIT 1;
SELECT conductor.Name, orchestra.Orchestra  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra   FROM conductor   INNER JOIN orchestra   ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT conductor.Name FROM conductor  INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Conductor_ID  HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT conductor.Name  FROM conductor  INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;
SELECT Orchestra, Major_Record_Format  FROM orchestra  ORDER BY COUNT(*) ASC;
SELECT Major_Record_Format, COUNT(*) as Frequency   FROM orchestra   GROUP BY Major_Record_Format   ORDER BY Frequency DESC
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT Orchestra  FROM orchestra  WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Orchestra  FROM orchestra  WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003;
SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded < 2003  AND Record_Company IN  (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ("CD", "DVD");
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT orchestra.Year_of_Founded  FROM orchestra  INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID  GROUP BY orchestra.Orchestra_ID  HAVING COUNT(DISTINCT performance.Performance_ID) > 1;
SELECT orchestra.Year_of_Founded  FROM orchestra  JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID  GROUP BY orchestra.Orchestra_ID  HAVING COUNT(DISTINCT performance.Performance_ID) > 1
SELECT COUNT(*) FROM Highschooler
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler
SELECT ID, name, grade FROM Highschooler
SELECT grade FROM Highschooler;
SELECT ID, grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler  WHERE name = 'Kyle';
SELECT name  FROM Highschooler  WHERE grade = 10;
SELECT name  FROM Highschooler  WHERE grade = 10
SELECT ID  FROM Highschooler  WHERE name = 'Kyle';
SELECT ID  FROM Highschooler  WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9,10);
SELECT COUNT(*)  FROM Highschooler  WHERE grade IN (9,10)
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade;
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1;
SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(*) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT Highschooler.ID, COUNT(Friend.friend_id)  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID
SELECT Friend.student_id, COUNT(*)  FROM Friend  GROUP BY Friend.student_id
SELECT Highschooler.name, COUNT(Friend.student_id)  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Friend.friend_id)  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1;
SELECT Highschooler.name  FROM Highschooler  INNER JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING COUNT(Friend.friend_id) >= 3;
SELECT Highschooler.name FROM Highschooler  INNER JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 3;
SELECT Highschooler.name FROM  Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE  Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID JOIN Highschooler AS Kyle ON Kyle.ID = Friend.student_id WHERE Kyle.name = 'Kyle'
SELECT COUNT(*) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle'
SELECT COUNT(*)  FROM Highschooler h  JOIN Friend f ON h.ID = f.student_id  WHERE h.name = 'Kyle'
SELECT Highschooler.ID  FROM Highschooler  WHERE Highschooler.ID NOT IN      (SELECT friend.student_id FROM Friend       UNION       SELECT friend.friend_id FROM Friend)
SELECT ID  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend UNION SELECT Friend.friend_id FROM Friend)
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN  (SELECT friend_id FROM Friend  UNION  SELECT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id INNER JOIN Likes ON Highschooler.ID = Likes.student_id WHERE Highschooler.ID IN (   SELECT friend_id   FROM Friend ) GROUP BY Highschooler.ID
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (   SELECT Friend.student_id   FROM Friend   JOIN Likes ON Friend.friend_id = Likes.liked_id AND Friend.student_id = Likes.student_id )
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  JOIN Likes ON Friend.friend_id = Likes.student_id  WHERE Highschooler.ID IN    (SELECT friend_id FROM Friend WHERE student_id = Highschooler.ID)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*)  FROM Likes  GROUP BY student_id
SELECT Highschooler.name, COUNT(Likes.liked_id)  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.name
SELECT Highschooler.name, COUNT(Likes.liked_id)  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.name
SELECT Highschooler.name FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;
SELECT Highschooler.name  FROM      Highschooler      JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY      Highschooler.ID  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT Highschooler.name  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID  HAVING COUNT(Likes.liked_id) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) >= 2;
SELECT Highschooler.name FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(DISTINCT Friend.friend_id) >= 2
SELECT Highschooler.name FROM Highschooler  INNER JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Highschooler.grade > 5  GROUP BY Highschooler.ID  HAVING COUNT(Friend.friend_id) >= 2;
SELECT COUNT(*)  FROM Likes  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT AVG(Highschooler.grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(Highschooler.grade) FROM Highschooler  WHERE Highschooler.ID IN (SELECT friend_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.ID NOT IN      (SELECT Friend.student_id      FROM Friend) ORDER BY Highschooler.grade ASC LIMIT 1;
SELECT state FROM Owners WHERE state IN (   SELECT state   FROM Professionals )
SELECT state  FROM Owners  WHERE state IN (SELECT state FROM Professionals)
SELECT AVG(age)  FROM Dogs  WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN  (SELECT professional_id FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2)
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2);
SELECT Dogs.name  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  GROUP BY Dogs.dog_id  HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name  FROM Dogs  WHERE Dogs.owner_id IN      (SELECT Owners.owner_id       FROM Owners       INNER JOIN Treatments ON Owners.owner_id = Treatments.dog_id       GROUP BY Owners.owner_id       HAVING SUM(Treatments.cost_of_treatment) <= 1000)
SELECT first_name FROM Owners  WHERE first_name NOT IN  (SELECT first_name FROM Dogs) UNION  SELECT first_name FROM Professionals  WHERE first_name NOT IN  (SELECT first_name FROM Dogs)
SELECT first_name   FROM Owners   WHERE first_name NOT IN (SELECT name FROM Dogs)   UNION   SELECT first_name   FROM Professionals   WHERE first_name NOT IN (SELECT name FROM Dogs)
SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address   FROM Professionals   LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id   WHERE Treatments.treatment_id IS NULL
SELECT professionals.professional_id, professionals.role_code, professionals.email_address   FROM professionals   WHERE professionals.professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners WHERE Owners.owner_id = (   SELECT Dogs.owner_id   FROM Dogs   GROUP BY Dogs.owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Owners.owner_id, Owners.first_name, Owners.last_name  FROM Owners  WHERE Owners.owner_id = (SELECT Dogs.owner_id                           FROM Dogs                           GROUP BY Dogs.owner_id                           ORDER BY COUNT(*) DESC                           LIMIT 1);
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 );
SELECT professional_id, role_code, first_name  FROM Professionals  WHERE professional_id IN (     SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_id) >= 2 )
SELECT Breeds.breed_name  FROM Dogs  INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  GROUP BY Breeds.breed_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Breeds.breed_name  FROM  Breeds  JOIN  Dogs  ON  Breeds.breed_code = Dogs.breed_code  GROUP BY  Breeds.breed_name  ORDER BY  COUNT(Dogs.dog_id) DESC  LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name  FROM Owners  WHERE Owners.owner_id IN (     SELECT Dogs.owner_id      FROM Dogs      WHERE Dogs.dog_id IN (         SELECT Treatments.dog_id          FROM Treatments          GROUP BY Treatments.dog_id          ORDER BY SUM(Treatments.cost_of_treatment) DESC          LIMIT 1     ) )
SELECT Treatment_Types.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatments.treatment_type_code  ORDER BY SUM(Treatments.cost_of_treatment)  LIMIT 1;
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types INNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_code ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Charges ON Dogs.size_code = Charges.charge_type  GROUP BY Owners.owner_id  ORDER BY SUM(Charges.charge_amount) DESC  LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code  FROM Owners  WHERE Owners.owner_id = (     SELECT Dogs.owner_id      FROM Dogs      GROUP BY Dogs.owner_id      ORDER BY SUM(         SELECT Treatments.cost_of_treatment          FROM Treatments          WHERE Treatments.dog_id = Dogs.dog_id         )     DESC      LIMIT 1 )
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, cell_number   FROM Professionals   WHERE professional_id IN     (SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_type_code) >= 2);
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.date_of_treatment, Professionals.first_name   FROM Treatments   JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description  FROM Treatments  INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners  INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id  INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Dogs.name FROM Owners  INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  WHERE Breeds.breed_name = (SELECT breed_name FROM Breeds ORDER BY breed_code LIMIT 1)
SELECT Dogs.name, Treatments.date_of_treatment   FROM Dogs   INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code   INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id   WHERE Breeds.breed_name = (SELECT breed_name FROM Breeds ORDER BY COUNT(*) LIMIT 1)
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Owners.state = 'Virginia'
SELECT Dogs.date_arrived, Dogs.date_departed  FROM Dogs  INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT Owners.last_name FROM Dogs INNER JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs);
SELECT last_name  FROM Owners  WHERE owner_id IN (SELECT owner_id                     FROM Dogs                     WHERE age = (SELECT MIN(age) FROM Dogs))
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs;
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT Dogs.dog_id) AS num_dogs_treated  FROM Dogs  INNER JOIN Treatments  ON Dogs.dog_id = Treatments.dog_id;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id)  FROM Treatments;
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address   FROM Owners   WHERE state LIKE '%North%'
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT MAX(cost_of_treatment) FROM Treatments
SELECT MAX(date_of_treatment), cost_of_treatment   FROM Treatments;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);
SELECT COUNT(professional_id)  FROM Professionals  WHERE professional_id NOT IN    (SELECT professional_id     FROM Treatments)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN  (SELECT DISTINCT professional_id FROM Treatments)
SELECT Dogs.name, Dogs.age, Dogs.weight   FROM Dogs   WHERE Dogs.abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight   FROM Dogs   WHERE Dogs.abandoned_yn = 1;
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs;
SELECT MAX(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT charge_type, charge_amount   FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount)  FROM Charges
SELECT MAX(charge_amount)  FROM Charges;
SELECT email_address, cell_number, home_phone   FROM Professionals
SELECT professional_id, email_address, home_phone, cell_number FROM Professionals
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds, Sizes;
SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT COUNT(*) FROM singer;
SELECT COUNT(Singer_ID) FROM singer
SELECT Name  FROM singer  ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship  FROM singer
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name  FROM singer  WHERE Citizenship <> 'French'
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer  ORDER BY Net_Worth_Millions DESC  LIMIT 1;
SELECT Name  FROM singer  ORDER BY Net_Worth_Millions DESC  LIMIT 1;
SELECT Citizenship, COUNT(*) as Num_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) as count  FROM singer  GROUP BY Citizenship  ORDER BY count DESC  LIMIT 1;
SELECT Citizenship FROM singer  GROUP BY Citizenship  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship
SELECT song.Title, singer.Name  FROM song  JOIN singer  ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT singer.Name  FROM singer  INNER JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE song.Sales > 300000;
SELECT Name FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE Sales > 300000;
SELECT singer.Name  FROM singer  JOIN song  ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.Singer_ID  HAVING COUNT(song.Song_ID) > 1
SELECT Name FROM singer  WHERE Singer_ID IN  (SELECT Singer_ID FROM song  GROUP BY Singer_ID  HAVING COUNT(*) > 1);
SELECT singer.Name, SUM(song.Sales)   FROM singer   JOIN song ON singer.Singer_ID = song.Singer_ID   GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales) FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT singer.Name  FROM singer  LEFT JOIN song  ON singer.Singer_ID = song.Singer_ID  WHERE song.Song_ID IS NULL;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955
SELECT COUNT(*) FROM Other_Available_Features;
SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'
SELECT Properties.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = [insert code here]
SELECT Properties.property_name  FROM Properties  WHERE Properties.property_type_code IN ('HSE', 'APT')  AND Properties.room_count > 1
